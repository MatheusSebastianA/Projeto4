#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <getopt.h>
#include <string.h>
#include "libArchive.h"


int main(int argc, char **argv){
    char *nomeArquivos[TAM_NOME];
    char *Archive = NULL;
    int opt, i, opI = 0, opA = 0, opM = 0, opX = 0, opR = 0, opC = 0, opH = 0;
    struct diretorio *d = NULL;
    struct nodoM *aux = NULL;
    while ((opt = getopt(argc, argv, "iam:xrch")) != -1) {
        switch (opt){
            case 'i':
                opI++;
                break;
            case 'a':
                opA++;
                break;
            case 'm':
                nomeArquivos[0] = optarg;
                Archive = argv[3];
                nomeArquivos[1] = argv[4];           
                opM++;
                break;
            case 'x':
                opX++;
                break;
            case 'r':
                opR++;
                break;
            case 'c':
                Archive = optarg;
                opC++;
                break;
            case 'h':
                opH++;
                break;
            default:
                printf ("O argumento passado não é válido\n");
	            return 1;
        }		
    }

    if(opI + opA + opM + opX + opR + opC + opH != 1){
        printf("Os argumentos passados não são válidos, ");
        imprime_opcoes();
        return 1;
    }

    if(opH == 1){
        imprime_opcoes();
        return 0;
    }

    d = cria_diretorio();
    recebe_diretorio(d, Archive);

    if(opI == 1 && argc > 3){
        Archive = argv[3];
        for(i = 3; i < argc; i++)
            nomeArquivos[i - 3] = argv[i];

        for(i = 0; i < argc - 3; i++)
            atualiza_conteudo(d, nomeArquivos[i], Archive, insereI);
    }
    
    else if(opA == 1 && argc > 3){
        Archive = argv[3];
            for(i = 3; i < argc; i++){
                nomeArquivos[i - 3] = argv[i];
                atualiza_conteudo(d, nomeArquivos[i], Archive, insereA);
            }
    }
    
    else if(opM == 1 && argc > 3){
        insere_conteudo_apos_target(d, nomeArquivos[1], nomeArquivos[0], Archive);
        
    }

    else if(opX == 1){
        if(argc == 3){
            Archive = argv[3];
            aux = d->inicio;
            for(i = 0; i <= d->fim->ordem; i++){
                extrai_conteudo_arquivo(d, Archive, aux->nomeArq);
                aux = aux->prox;
            }
        }
        else{
            Archive = argv[3];
            for(i = 3; i < argc; i++){
                nomeArquivos[i - 3] = argv[i];
                extrai_conteudo_arquivo(d, Archive, nomeArquivos[i]);
            }
        }
    }

    else if(opR == 1 && argc > 3){
        Archive = argv[3];
            for(i = 3; i < argc; i++){
                nomeArquivos[i - 3] = argv[i];
                remove_conteudo(d, Archive, nomeArquivos[i]);
            }
    }

    else if(opC == 1)
        imprime_informacoes(d, Archive);

    insere_diretorio(d, Archive); 
    destroi_diretorio(d);

    return 0;
}
